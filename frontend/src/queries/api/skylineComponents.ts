/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { SkylineContext, useSkylineContext } from './skylineContext';
import type * as Fetcher from './skylineFetcher';
import { skylineFetch } from './skylineFetcher';
import type * as Schemas from './skylineSchemas';

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = SkylineContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    skylineFetch<string | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export const useGetCurrentUser = <TData = string | null>(
    variables: GetCurrentUserVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<string | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useSkylineContext(options);
    return reactQuery.useQuery<string | null, GetCurrentUserError, TData>({
        queryKey: queryKeyFn({
            path: '/auth/me',
            operationId: 'getCurrentUser',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetCurrentUser({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type StartImportPathParams = {
    year: number;
};

export type StartImportError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type StartImportVariables = {
    pathParams: StartImportPathParams;
} & SkylineContext['fetcherOptions'];

/**
 * Import contributions for the current user.
 */
export const fetchStartImport = (variables: StartImportVariables, signal?: AbortSignal) =>
    skylineFetch<undefined, StartImportError, undefined, {}, {}, StartImportPathParams>({
        url: '/contributions/import/{year}',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Import contributions for the current user.
 */
export const useStartImport = (
    options?: Omit<reactQuery.UseMutationOptions<undefined, StartImportError, StartImportVariables>, 'mutationFn'>,
) => {
    const { fetcherOptions } = useSkylineContext();
    return reactQuery.useMutation<undefined, StartImportError, StartImportVariables>({
        mutationFn: (variables: StartImportVariables) => fetchStartImport({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type GetModelPathParams = {
    user: string;
    year: number;
};

export type GetModelError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type GetModelVariables = {
    pathParams: GetModelPathParams;
} & SkylineContext['fetcherOptions'];

/**
 * Retrieve the contributions model for a given user and year.
 */
export const fetchGetModel = (variables: GetModelVariables, signal?: AbortSignal) =>
    skylineFetch<void, GetModelError, undefined, {}, {}, GetModelPathParams>({
        url: '/contributions/model/{user}/{year}',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the contributions model for a given user and year.
 */
export const useGetModel = <TData = void>(
    variables: GetModelVariables,
    options?: Omit<reactQuery.UseQueryOptions<void, GetModelError, TData>, 'queryKey' | 'queryFn' | 'initialData'>,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useSkylineContext(options);
    return reactQuery.useQuery<void, GetModelError, TData>({
        queryKey: queryKeyFn({
            path: '/contributions/model/{user}/{year}',
            operationId: 'getModel',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetModel({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type GetYearsError = Fetcher.ErrorWrapper<undefined>;

export type GetYearsResponse = number[];

export type GetYearsVariables = SkylineContext['fetcherOptions'];

/**
 * Get a list of years for which contributions have been imported.
 */
export const fetchGetYears = (variables: GetYearsVariables, signal?: AbortSignal) =>
    skylineFetch<GetYearsResponse, GetYearsError, undefined, {}, {}, {}>({
        url: '/contributions/years',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Get a list of years for which contributions have been imported.
 */
export const useGetYears = <TData = GetYearsResponse>(
    variables: GetYearsVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<GetYearsResponse, GetYearsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useSkylineContext(options);
    return reactQuery.useQuery<GetYearsResponse, GetYearsError, TData>({
        queryKey: queryKeyFn({
            path: '/contributions/years',
            operationId: 'getYears',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetYears({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type QueryOperation =
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      }
    | {
          path: '/contributions/model/{user}/{year}';
          operationId: 'getModel';
          variables: GetModelVariables;
      }
    | {
          path: '/contributions/years';
          operationId: 'getYears';
          variables: GetYearsVariables;
      };
